import pandas as pd
import re
import streamlit as st
import warnings

from core.utils import read_file, make_full_analyses_anomalies

warnings.filterwarnings('ignore')
st.set_option('deprecation.showPyplotGlobalUse', False)


PATTERN = 'моск'
trainings_column_name = ['Количество тренингов 2015/2016',
                         'Количество  тренингов  2016/2017',
                         'Количество  тренингов  2017/2018',
                         'Количество  тренингов  2018/2019',
                         'Количество  тренингов  2019/2020',
                         'Количество  тренингов  2020/2021',
                         'Количество  тренингов  2021/2022',
                         'Количество  тренингов  2022/2023']
column_to_fill_stop_ = ['Кол-во приостановок за прогулы  2015/2016',
                        'Кол-во приостановок за прогулы  2016/2017',
                        'Кол-во приостановок за прогулы  2017/2018',
                        'Кол-во приостановок за прогулы  2018/2019',
                        'Кол-во приостановок за прогулы  2019/2020',
                        'Кол-во приостановок за прогулы  2020/2021',
                        'Кол-во приостановок за прогулы  2021/2022',
                        'Кол-во приостановок за прогулы  2022/2023',
                        'Всего приостановок за прогулы',
                        'Посетил уроков  2015/2016',
                        'Прогулял уроков  2015/2016',
                        'Оплаченные отмены  2015/2016',
                        'Количество уроков  2015/2016',
                        'Посетил уроков  2016/2017',
                        'Прогулял уроков  2016/2017',
                        'Оплаченные отмены  2016/2017',
                        'Количество уроков  2016/2017',
                        'Посетил уроков  2017/2018',
                        'Прогулял уроков  2017/2018',
                        'Оплаченные отмены  2017/2018',
                        'Количество уроков  2017/2018',
                        'Посетил уроков  2018/2019',
                        'Прогулял уроков  2018/2019',
                        'Оплаченные отмены  2018/2019',
                        'Количество уроков  2018/2019',
                        'Посетил уроков  2019/2020',
                        'Прогулял уроков  2019/2020',
                        'Оплаченные отмены  2019/2020',
                        'Количество уроков  2019/2020',
                        'Посетил уроков  2020/2021',
                        'Прогулял уроков  2020/2021',
                        'Оплаченные отмены  2020/2021',
                        'Количество уроков  2020/2021',
                        'Посетил уроков  2021/2022',
                        'Прогулял уроков  2021/2022',
                        'Оплаченные отмены  2021/2022',
                        'Количество уроков  2021/2022',
                        'Посетил уроков  2022/2023',
                        'Прогулял уроков  2022/2023',
                        'Оплаченные отмены  2022/2023',
                        'Количество уроков  2022/2023',
                        'Всего посетил уроков',
                        'Всего прогулял уроков',
                        'Всего оплаченные отмены',
                        'Всего уроков',
                        'Кампус 2016',
                        'Кампус 2017',
                        'Кампус 2018',
                        'Кампус 2019',
                        'Красочный забег 2017',
                        'Красочный забег 2018',
                        'Красочный забег 2019',
                        'Московский марафон 2016',
                        'Московский марафон 2017',
                        'Московский марафон 2018',
                        'Московский марафон 2019',
                        'Трамплин в жизнь 2019',
                        'Арифметика успеха',
                        'Двигайся',
                        'Новогодняя кампания Газпром-Медиа',
                        'Проект для опросов - тестовый',
                        'Такие дела',
                        'Фандрайзинг',
                        'Поиск замещающей семьи ученику']
replace_dnt_know = ['Статус контакта',
                    'Кто контактирует напрямую',
                    'ФИО менеджера, который общается',
                    'Категория 3-го лица',
                    'Статус контакта аккаунт менеджера через vk.com',
                    'Статус контакта за Сентябрь 2022',
                    'Статус контакта за Октябрь 2022',
                    'Статус контакта за Ноябрь 2022',
                    'Статус контакта за Декабрь 2022',
                    'Статус контакта за Январь 2023',
                    'Статус контакта за Февраль 2023',
                    'Статус контакта за Март 2023',
                    'Статус контакта за Апрель 2023',
                    'Статус контакта за Май 2023',
                    'Статус контакта за Июнь 2023',
                    'Статус контакта за Июль 2023',
                    'Статус контакта за Август 2023',
                    'Социальный статус',
                    'Наличие значимого взрослого',
                    'Категория значимого взрослого',
                    'Общение с кровными родственниками',
                    'Жилищные условия',
                    'Образование законченное',
                    'Тип законченного образования',
                    'Сведения об учебе в данный момент',
                    'Тип получаемого образования',
                    'Сведения о работе в данный момент',
                    'Семейное положение',
                    'Наличие детей',
                    'Служба в армии',
                    'Нахождение в местах лишения свободы',
                    'Условная судимость',
                    'Мониторинг - Кто приглашает',
                    'Мониторинг - Статус отправки приглашения']

childrens = read_file(st.secrets['spreadsheet_id_students'],
                      st.secrets['zero_gid'])
childrens['детский дом id'] = (childrens
                               .apply(lambda row:
                                      row['Бывший детский дом']
                                      if row['Выпускник ДД/Воспитанник ДД']
                                      == 'Выпускник ДД'
                                      else row['Детский дом_id'], axis=1))
childrens['Регион'].fillna('не указан', inplace=True)
childrens['Регион'] = (childrens['Регион']
                       .apply(lambda region: ('Москва и МО'
                                              if re.compile(PATTERN,
                                                            re.IGNORECASE)
                                              .search(region) else region)))
childrens['Регион'] = (childrens['Регион']
                       .apply(lambda region: ('Санкт-Петербург и ЛО'
                                              if region == 'Санкт-Петербург'
                                              or
                                              region == 'Ленинградская область'
                                              else region)))
childrens['ОВЗ (тип коррекции)'].fillna('нет', inplace=True)
childrens['ОВЗ (тип коррекции)'] = (childrens['ОВЗ (тип коррекции)']
                                    .apply(lambda x: 'нет' if not x.isnumeric()
                                           else x))
childrens['Социальный статус (карточка ученика)'].fillna('не знаю',
                                                         inplace=True)
childrens['второгодник'] = (childrens[
    'История обучения в школе (если второгодник)'
    ]
   .apply(lambda x: 'Да' if pd.notna(x) else 'Нет'))
childrens['Социальный статус (карточка ученика)'].fillna('не знаю',
                                                         inplace=True)
childrens['Кол-во баллов'].fillna(0, inplace=True)
childrens['Кол-во баллов'].astype('int64')
if len(childrens) != len(childrens['Занимается онлайн']):
    childrens['Занимается онлайн'].fillna('не знаю', inplace=True)
childrens['Участвует в тренингах'] = (childrens['Участвует в тренингах']
                                      .apply(lambda x: 'Нет' if pd.isna(x)
                                             else x))
for column in trainings_column_name:
    childrens[column].fillna(0, inplace=True)
childrens['Всего тренингов'] = (childrens.apply(
    lambda row: sum(row[column] for column in trainings_column_name), axis=1))
for column in ['Отказался от онлайна', 'Отказался от тренингов']:
    childrens[column].fillna('Нет', inplace=True)
for column in ['Зарегистрирован (дата)', 'Дата рождения']:
    childrens[column] = pd.to_datetime(childrens[column])
childrens['Год рождения'] = childrens['Дата рождения'].dt.year
childrens['Год выпуска из ДД/ПС'] = (childrens
                                     .apply(lambda row:
                                            int(row['Год рождения']) + 18
                                            if not
                                            isinstance(row[
                                                'Год выпуска из ДД/ПС'
                                                ], int)
                                            else row['Год выпуска из ДД/ПС'],
                                            axis=1))
childrens[
    ('Сведения об учёбе в данный момент (карточка ученика) - '
     'плановый год окончания')
    ].fillna(0, inplace=True)
for column in ['Нахождение в местах лишения свободы (карточка ученика)',
               'Условная судимость (карточка ученика)']:
    childrens[column].fillna('Не знаю', inplace=True)
for column in column_to_fill_stop_:
    childrens[column].fillna(0, inplace=True)
for column in replace_dnt_know:
    childrens[column].fillna('Не знаю', inplace=True)
childrens.drop(['Детский дом_id',
                'Бывший детский дом',
                'ID семьи',
                'Социальный статус',
                'Раздельное проживание'], inplace=True, axis=1)
for column in ['Дата последнего заполнения', 'Дата последнего контакта']:
    childrens[column].fillna('1.01.1980', inplace=True)
    childrens[column] = pd.to_datetime(childrens[column], format='mixed')


if __name__ == '__main__':
    st.title('Студенты ✍️')
    st.write()
    st.subheader('Таблица')
    st.dataframe(childrens)
    column = st.selectbox(
        'Выберите колонку с числовым показателем',
        [column for column in childrens.columns
         if isinstance(childrens[column][0], float)],
        key=0, index=1)
    agree = st.checkbox('Хотите посмотреть распределение по факторам?')
    if agree:
        factor = st.selectbox(
            'Выберите фактор',
            [column for column in childrens.columns
             if not isinstance(childrens[column][0], float)],
            key=1, index=0)
        make_full_analyses_anomalies(childrens, column, factor)
    else:
        make_full_analyses_anomalies(childrens, column)
